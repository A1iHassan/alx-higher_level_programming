>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> mat1 = [[1, 2, 3], [3, 4, 5], [5, 6, 7]]
>>> print(matrix_divided(mat1, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero
>>> mat2 = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(mat2, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

error input
>>> noneList = None
>>> emp = []
>>> emps = [[], [], []]
>>> wrong = [42, [2, 5], [1, 2, 3]]
>>> types = [["blue", 1, 2], [3, 4, "f"], ["23b", 5, 6]]
>>> diffLen = [[1,3,3,3], [3,5,1,2,5], [2,5,8]]
>>> matrix_divided(diffLen, 3)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size
>>> matrix_divided(types, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided(emp, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided(emps, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided(wrong, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided(noneList, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> print(matrix_divided(mat2, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
>>> print(matrix_divided(mat1, 4))
[[0.25, 0.5, 0.75], [0.75, 1.0, 1.25], [1.25, 1.5, 1.75]]
